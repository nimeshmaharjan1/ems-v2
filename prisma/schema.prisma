generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum USER_ROLES {
  SUPER_ADMIN
  STAFF
  USER
  BUSINESS_CLIENT
}

model User {
  id                       String      @id @default(cuid())
  username                 String      @unique
  password                 String
  name                     String?
  email                    String?     @unique
  phone_number             String?     @unique
  emailVerified            DateTime?
  role                     USER_ROLES  @default(USER)
  applyingAsBusinessClient Boolean     @default(false)
  image                    String?
  accounts                 Account[]
  sessions                 Session[]
  orders                   Order[]
  reviews                  Review[]
  shopAddress              String?
  taxId                    String?
  comments                 Comment[]
  registeredComplaints     Complaint[] @relation(name: "complaintCreatedUserRelation")
  resolvedComplaints       Complaint[] @relation(name: "resolvedByUserRelation")
}

enum ORDER_STATUS {
  Pending
  Processing
  Dispatched
  Delivered
  Cancelled
  Returned
}

enum PAYMENT_METHOD {
  COD
  FONEPAY
}

enum PAYMENT_STATUS {
  Paid
  Unpaid
  Partial
  Refunded
}

model Comment {
  id          String     @id @default(cuid())
  comment     String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  order       Order      @relation(fields: [orderId], references: [id], onDelete: Cascade) // Specify onDelete: CASCADE on the order field
  orderId     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Complaint   Complaint? @relation(fields: [complaintId], references: [id])
  complaintId String?
}

model Order {
  id                      String                     @id @default(cuid())
  orderNumber             Int                        @unique @default(autoincrement())
  items                   OrderItem[]
  totalPrice              Float
  user                    User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  deliveryCharge          Float?
  status                  ORDER_STATUS               @default(Pending)
  paymentStatus           PAYMENT_STATUS             @default(Unpaid)
  selectedWholesaleOption SELECTED_WHOLESALE_OPTION? @default(CASH)
  paymentMethod           PAYMENT_METHOD             @default(COD)
  comments                Comment[] // Remove onDelete: CASCADE from the comments field
  customerAddress         String
  additionalPhoneNumber   String?
  complaints              Complaint[]
  partiallyPaidAmount     Float?
  amountLeftToPay         Float?
  partialPaymentTime      DateTime?                  @updatedAt
}

model OrderItem {
  id          String      @id @default(cuid())
  quantity    Int
  price       Float
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  faultyItems FaultItem[]
}

model Company {
  id         String     @id @default(cuid())
  name       String     @unique
  position   Int?       @default(autoincrement())
  products   Product[]
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  companies Company[]
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum SELECTED_WHOLESALE_OPTION {
  CREDIT
  CASH
}

enum PRODUCT_STATUS {
  ACTIVE
  DRAFT
  OUT_OF_STOCK
}

model Product {
  id                   String          @id @default(cuid())
  images               String[]
  title                String
  description          String?
  price                Float
  sellingPrice         Float?
  crossedPrice         Float?
  hasOffer             Boolean?        @default(false)
  model                String?
  wholesaleCreditPrice Float?
  wholesaleCashPrice   Float?
  status               PRODUCT_STATUS? @default(ACTIVE)
  category             Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId           String
  company              Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId            String
  quantity             Int
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  slug                 String?
  orderItems           OrderItem[]
  reviews              Review[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//TODO remove optional description fault item

model FaultItem {
  id          String     @id @default(cuid())
  description String?
  orderItem   OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  complaint   Complaint? @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  complaintId String?
}

enum COMPLAINT_STATUS {
  Pending
  InProgress
  Resolved
}

model Complaint {
  id           String           @id @default(cuid())
  description  String
  user         User             @relation(name: "complaintCreatedUserRelation", fields: [userId], references: [id])
  userId       String
  order        Order?           @relation(fields: [orderId], references: [id])
  orderId      String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  faultyItems  FaultItem[]
  status       COMPLAINT_STATUS @default(Pending)
  comments     Comment[]
  resolvedBy   User?            @relation(name: "resolvedByUserRelation", fields: [resolvedById], references: [id])
  resolvedById String?
}

model Settings {
  id             String  @id @default(cuid())
  deliveryCharge Float?  @default(250)
  storeAddress   String?
  contactNumber  String?
  tiktok         String?
  facebook       String?
  email          String?
}